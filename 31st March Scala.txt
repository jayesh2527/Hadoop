spark-shell

var is mutuable and val is immutable

scala> val s="hi"
s: String = hi
scala> s="bye"
<console>:25: error: reassignment to val
       s="bye"

scala> val name:String="jai"
name: String = jai

Data types
==========

var a: Boolean = true
    var a1: Byte = 126
    var a2: Float = 2.45673f
    var a3: Int = 3
    var a4: Short = 45
    var a5: Double = 2.93846523
    var a6: Char = 'A'

object HelloWorld {
  def main(args: Array[String]): Unit = {
    println("Hello, world!")
  }
}

scalac HelloWorld.scala
scala -classpath . HelloWorld

Hello, world!

scala> if (a > 30) { println("hello") }
hello

var file =scala.io.Source.fromFile("student").mkstringfile: String=

val fileContents = Source.fromFile("student").getLines.mkString

val bufferedSource = Source.fromFile("student")

The simplest syntax of for loop with ranges in Scala is âˆ’

for( var x <- Range ){
   statement(s);
}

for(i<-1 to 3;j <-1 to 3
println(i+j)

scala> while(a<25){
     | a=a+1
     | println(a)
     | }
21
22
23
24
25

Array

scala> val a =Array(10,29)
a: Array[Int] = Array(10, 29)
  
scala> a(0)
res17: Int = 10


import scala.collection.mutable.ArrayBuffer;
val a = ArrayBuffer[Int]()
a +=1
a +=(2,3,4)

===

Singleton object

Scala is more object oriented language than Java so, Scala does not contain any concept of static keyword. Instead of static keyword Scala has singleton object. A Singleton object is an object which defines a single object of a class. A singleton object provides 
an entry point to your program execution

Important points about singleton object

The method in the singleton object is globally accessible.
You are not allowed to create an instance of singleton object.
You are not allowed to pass parameter in the primary constructor of singleton object.
In Scala, a singleton object can extend class and traits.
In Scala, a main method is always present in singleton object.
The method in the singleton object is accessed with the name of the object(just like calling static method in Java), so there is no need to create an object to access this method.

object Main {
    def sayHi() {
        println("Hi!");
    }
}

There are many inbuilt objects in scala library one among them is the Console object which reads the values and prints on the terminal.

Lets consider an example for Console object;


object Cons {
def main(args:Array[String]) = {
    Console.println("Enter a number :");
    val num = Console.readInt;
    Console.println("Entered Number is :"+num)
    }
}
------------
scala> for(i<-1 to 3;j <-1 to 3)
     | println(i+j)
2
3
4
3
4
5
4
5
6

scala> for(i<-1 to 3;j <-1 to 3)
     | println(10*i+j,i,j)
(11,1,1)
(12,1,2)
(13,1,3)
(21,2,1)
(22,2,2)
(23,2,3)
(31,3,1)
(32,3,2)
(33,3,3)
---------

Function

scala> def func(a:Int,b:Int)
     | {
     | println(a,b)
     | }
func: (a: Int, b: Int)Unit
scala> func(10,20)
(10,20)

scala> def addInt( a:Int, b:Int ) : Int = { 
     | var sum =  0
     | sum = a + b
     | return sum
     | }
addInt: (a: Int, b: Int)Int
scala> addInt(2,3)
res13: Int = 5


scala> def addInt( n:Int ): Int = { 
     | var fact = 1
     | for( a <- 1 to n){
     | fact = fact * a
     | }
     | return fact
     | }
addInt: (n: Int)Int

val filename = "fileopen.scala"
for (line <- Source.fromFile(filename).getLines) {
    println(line)
}

var args = "hello"
args.foreach(arg=>println(arg))

pyspark