--1)Create Dataframe
val lines = sc.textFile("test/simplilearn/bankmarketingdata.csv")
val bank = lines.map(x => x.split(";"))
--Drop header
val bankf = bank.mapPartitionsWithIndex { (idx, iter) => if (idx == 0) iter.drop(1) else iter }
--Define Class for the schema
case class Bank(age:Int, job:String, marital:String, education:String, default:String, balance:Int,
housing:String, loan:String, contact:String, day:Int, month: String, duration:Int, campaign:Int, pdays:Int,
previous:Int, poutcome:String, y:String)
val bankrdd = bankf.map(
 x => Bank(x(0).toInt,
 x(1).replaceAll("\"","")
 ,x(2).replaceAll("\"","")
 ,x(3).replaceAll("\"","")
 ,x(4).replaceAll("\"","")
 ,x(5).toInt
 ,x(6).replaceAll("\"","")
 ,x(7).replaceAll("\"","")
 ,x(8).replaceAll("\"","")
 ,x(9).toInt
 ,x(10).replaceAll("\"","") 
 ,x(11).toInt
 ,x(12).toInt
 ,x(13).toInt
 ,x(14).toInt
 ,x(15).replaceAll("\"","")
 ,x(16).replaceAll("\"","")
 )
 )
val bankDF = bankrdd.toDF()
bankDF.registerTempTable("bank")
--2) Marketing Success Rate
val success = sqlContext.sql("select (a.subscribed/b.total)*100 as success_percent from (select count(*)
as subscribed from bank where y='yes') a,(select count(*) as total from bank) b").show()
--2.a) Marketing Failure Rate
val failure = sqlContext.sql("select (a.not_subscribed/b.total)*100 as failure_percent from (select
count(*) as not_subscribed from bank where y='no') a,(select count(*) as total from bank) b").show() 
